name: windows

on:
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'
  push:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'

jobs:
  image_tags:
    name: Determine image tags based on latest commits
    runs-on: ubuntu-latest

    outputs:
      base: ${{ steps.base.outputs.tag }}
      py: ${{ steps.py.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine base image tag
        id: base
        run: |
          rev=$( \
            git log -n 1 --author-date-order --pretty=format:%H -- \
            ./.github/docker/rez-win-base \
          )
          echo "base rev is ${rev}"
          echo "::set-output name=tag::${rev}"

      - name: Determine python image tag
        id: py
        run: |
          rev=$( \
            git log -n 1 --author-date-order --pretty=format:%H -- \
            ./.github/docker/rez-win-base \
            ./.github/docker/rez-win-py \
          )
          echo "py rev is ${rev}"
          echo "::set-output name=tag::${rev}"

  base_image:
    name: Pull or build base docker image
    runs-on: windows-${{ matrix.os-version }}
    needs: image_tags

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'

    steps:
      - id: vars
        run: |
          ${docker_image} = "rez-win-${{ matrix.os-version }}-base:${{ needs.image_tags.outputs.base }}"
          Write-Output "::set-output name=docker_image::${docker_image}"

      - name: Login to docker repository
        run: |
          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${gh_user} --password-stdin

      - name: Pull base image
        id: pull
        run: |
          Write-Output "Pulling image ${{ steps.vars.outputs.docker_image }}..."
          $ErrorActionPreference = "Continue"
          docker pull ${{ steps.vars.outputs.docker_image }} 2>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            Write-Output "::set-output name=image_exists::false"
            Write-Output "NEQ ZERO"
          }
          else {
            Write-Output "::set-output name=image_exists::true"
            Write-Output "EQ ZERO"
          }

          exit 0

      - name: Checkout
        if: steps.pull.outputs.image_exists == 'false'
        uses: actions/checkout@v2

      - name: Build base image
        if: steps.pull.outputs.image_exists == 'false'
        run: |
          Write-Output "Building DockerHub image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-base
          docker build --tag ${{ steps.vars.outputs.docker_image }} .

      - name: Push base image
        if: steps.pull.outputs.image_exists == 'false'
        run: |
          Write-Output "Pushing DockerHub image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-base
          docker push ${{ steps.vars.outputs.docker_image }}




#  testjob:
#    runs-on: ubuntu-latest
#    needs: check_base_image
#    steps:
#      - run: |
#          echo "IMAGE NAME IS ${{ needs.check_base_image.outputs.image_name_2019 }}"
#          echo "IMAGE EXISTS IS ${{ needs.check_base_image.outputs.image_exists_2019 }}"




#
# Picks up docker image from hub.docker.com as repository.
#
# Pulls without login (public repository only).
# Requires username/repository to match the github repository.
# For example: nerdvegas/rez -> User/Repository: nerdvegas
#
#jobs:
#  main:
#    runs-on: windows-2019
#
#    strategy:
#      matrix:
#        # Needs to match python version of images (see windows-docker-image.yaml)
#        python-version:
#          - '2.7.17'
#          # TODO add back once failing windows py3 builds are investigated
#          - '3.7.5'
#      fail-fast: false
#
#    steps:
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: "Pull Docker image nerdvegas/rez-win-py-${{ matrix.python-version }}:latest"
#        run: |
#          ${docker_image} = "nerdvegas/rez-win-py-${{ matrix.python-version }}"
#          docker pull ${docker_image}:latest
#
#      - name: Run Docker image (installs and tests rez)
#        run: |
#          ${docker_image} = "nerdvegas/rez-win-py-${{ matrix.python-version }}"
#          docker run --mount type=bind,src=$pwd,dst=C:\checkout,readonly ${docker_image}:latest
