name: windows

on:
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'
  push:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'

jobs:
  image_tags:
    # image tags are based on sourcefile contents
    name: Calculate image tags
    runs-on: ubuntu-latest

    outputs:
      base: ${{ steps.base.outputs.tag }}
      py: ${{ steps.py.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine base image tag
        id: base
        run: |
          tag=$( \
            find \
            ./.github/docker/rez-win-base \
            -type f \
            | sort \
            | xargs md5sum \
            | md5sum - \
            | awk '{print $1}' \
          )
          echo "base tag is ${tag}"
          echo "::set-output name=tag::${tag}"

      - name: Determine python image tag
        id: py
        run: |
          tag=$( \
            find \
            ./.github/docker/rez-win-base \
            ./.github/docker/rez-win-py \
            -type f \
            | sort \
            | xargs md5sum \
            | md5sum - \
            | awk '{print $1}' \
          )
          echo "py tag is ${tag}"
          echo "::set-output name=tag::${tag}"

  base_image:
    name: Build base docker image if required
    runs-on: windows-${{ matrix.os-version }}
    needs: image_tags

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'

    steps:
      - name: Set job vars
        id: vars
        run: |
          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          ${docker_image} = "${gh_user}/rez-win-${{ matrix.os-version }}-base:${{ needs.image_tags.outputs.base }}"

          Write-Output "::set-output name=gh_user::${gh_user}"
          Write-Output "::set-output name=docker_image::${docker_image}"

      - name: Login to docker repository
        run: |
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ steps.vars.outputs.gh_user }} --password-stdin

      - name: Inspect base image
        id: inspect
        run: |
          Write-Output "Inspecting image ${{ steps.vars.outputs.docker_image }}..."
          $ErrorActionPreference = "Continue"
          docker manifest inspect ${{ steps.vars.outputs.docker_image }} *>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            Write-Output "::set-output name=image_exists::false"
          }
          else {
            Write-Output "::set-output name=image_exists::true"
          }
          exit 0

      - name: Checkout
        if: steps.inspect.outputs.image_exists == 'false'
        uses: actions/checkout@v2

      - name: Build base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Building image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-base
          docker build --tag ${{ steps.vars.outputs.docker_image }} .

      - name: Push base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pushing image ${{ steps.vars.outputs.docker_image }}..."
          docker push ${{ steps.vars.outputs.docker_image }}

  py_image:
    name: Build py docker image if required
    runs-on: windows-${{ matrix.os-version }}
    needs:
      - image_tags
      - base_image

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'
        py-version:
          - '2.7.17'
          - '3.7.5'

    steps:
      - name: Set job vars
        id: vars
        run: |
          ${gh_user} = ("${{ github.repository }}" -Split '/')[0]
          ${base_docker_image} = "${gh_user}/rez-win-${{ matrix.os-version }}-base:${{ needs.image_tags.outputs.base }}"
          ${docker_image} = "${gh_user}/rez-win-${{ matrix.os-version }}-py-${{ matrix.py-version }}:${{ needs.image_tags.outputs.py }}"

          Write-Output "::set-output name=gh_user::${gh_user}"
          Write-Output "::set-output name=base_docker_image::${base_docker_image}"
          Write-Output "::set-output name=docker_image::${docker_image}"

      - name: Login to docker repository
        run: |
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ steps.vars.outputs.gh_user }} --password-stdin

      - name: Inspect py image
        id: inspect
        run: |
          Write-Output "Pulling image ${{ steps.vars.outputs.docker_image }}..."
          $ErrorActionPreference = "Continue"
          docker manifest inspect ${{ steps.vars.outputs.docker_image }} *>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            Write-Output "::set-output name=image_exists::false"
          }
          else {
            Write-Output "::set-output name=image_exists::true"
          }
          exit 0

      - name: Checkout
        if: steps.inspect.outputs.image_exists == 'false'
        uses: actions/checkout@v2

      - name: Pull base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pulling base image ${{ steps.vars.outputs.base_docker_image }}..."
          docker pull ${{ steps.vars.outputs.base_docker_image }}

      - name: Build py image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Building image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-py

          docker build `
            --tag ${{ steps.vars.outputs.docker_image }} `
            --build-arg BASE_IMAGE_NAME="${{ steps.vars.outputs.base_docker_image }}" `
            --build-arg IMAGE_NAME="${{ steps.vars.outputs.docker_image }}" `
            --build-arg PYTHON_VERSION="${{ matrix.py-version }}" `
            .

      - name: Push py image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pushing image ${{ steps.vars.outputs.docker_image }}..."
          docker push ${{ steps.vars.outputs.docker_image }}
