#
# This workflow builds base and python-version-specific docker images if
# required, then runs the rez tests in the python image.
#
# The images are tagged with a hash of the relevant sourcefile contents (eg
# Dockerfile). Images from the 'aswf' dockerhub org will be used if they are
# up-to-date (note that this does not require a dockerhub account).
#
# If images require updating, and you do _not_ have a dockerhub account, the
# workflow will fail. If you do have an account, the necessary images will be
# created with your account, and the tests will run. If you have an account,
# _and_ you are a member of the 'aswf' dockerhub org (which you indicate by
# setting secrets.DOCKERHUB_NAMESPACE to 'aswf'), then the images will be built
# with your account, and will be pushed to 'aswf' for others to use.
#
# This approach ensures that image rebuilds are avoided when possible, but are
# supported from non-member forks who may have made changes to docker-related
# source (such as Dockerfile) and need this workflow to run.
#
# Please note that if you need to rebuild images then you must supply the
# following secrets:
#
# DOCKERHUB_USER: Your dockerhub username.
# DOCKERHUB_TOKEN: Your dockerhub access token.
# DOCKERHUB_NAMESPACE: The namespace to publish to. If you are a member of the
#   'aswf' dockerhub org, you should set this to 'aswf'. If not, you should set
#   this to match your DOCKERHUB_USER.
#
---
name: windows

on:
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'
  push:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yaml'
      - '.github/docker/rez-win-base/**'
      - '.github/docker/rez-win-py/**'
      - '!src/rez/utils/_version.py'
      - '!**.md'

jobs:

  # image tags are based on sourcefile contents
  image_tags:
    name: Calculate image tags
    runs-on: ubuntu-latest

    outputs:
      base: ${{ steps.base.outputs.tag }}
      py: ${{ steps.py.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine base image tag
        id: base
        run: |
          tag=$( \
            find \
            ./.github/docker/rez-win-base \
            -type f \
            | sort \
            | xargs md5sum \
            | md5sum - \
            | awk '{print $1}' \
          )
          echo "base tag is ${tag}"
          echo "::set-output name=tag::${tag}"

      - name: Determine python image tag
        id: py
        run: |
          tag=$( \
            find \
            ./.github/docker/rez-win-base \
            ./.github/docker/rez-win-py \
            -type f \
            | sort \
            | xargs md5sum \
            | md5sum - \
            | awk '{print $1}' \
          )
          echo "py tag is ${tag}"
          echo "::set-output name=tag::${tag}"

  public_py_image:
    name: Check for up-to-date public py image
    runs-on: windows-${{ matrix.os-version }}
    needs: image_tags
    env:
      PUB_NAMESPACE: nerdvegas  # TODO change to aswf

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'
        py-version:
          - '2.7.17'
          - '3.7.5'

    outputs:
      # blame github for this silliness
      # https://github.community/t/bug-jobs-output-should-return-a-list-for-a-matrix-job/128626
      #
      image_exists_2019_2_7_17: ${{ steps.inspect.outputs.image_exists_2019_2_7_17 }}
      image_exists_2019_3_7_5: ${{ steps.inspect.outputs.image_exists_2019_3_7_5 }}

    steps:
      - name: Inspect public py image
        id: inspect
        run: |
          ${docker_image} = "${Env:PUB_NAMESPACE}/rez-win-${{ matrix.os-version }}-py-${{ matrix.py-version }}:${{ needs.image_tags.outputs.py }}"
          Write-Output "Inspecting image ${docker_image}..."
          $ErrorActionPreference = "Continue"
          docker manifest inspect ${docker_image} *>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            ${output_name} = "image_exists_${{ matrix.os-version }}_${{ matrix.py-version }}"
            ${output_name} = ${output_name} -replace '\.', '_'
            Write-Output "::set-output name=${output_name}::false"
          }
          exit 0

  # https://stackoverflow.com/questions/70249519/how-to-check-if-a-secret-variable-is-empty-in-if-conditional-github-actions
  dockerhub_access:
    name: Check for dockerhub access
    runs-on: ubuntu-latest

    outputs:
      enabled: ${{ steps.main.outputs.enabled }}

    steps:
      - id: main
        name: Check dockerhub credentials
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_NAMESPACE: ${{ secrets.DOCKERHUB_NAMESPACE }}
          DOCKERHUB_TOKEN: '' #${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USER != '' && env.DOCKERHUB_NAMESPACE != '' && env.DOCKERHUB_TOKEN != '' }}"
        run: |
          echo "::set-output name=enabled::true"

  maybe_build:
    name: Determine if images potentially need to be built
    runs-on: ubuntu-latest
    needs:
      - public_py_image
      - dockerhub_access

    outputs:
      enabled: ${{ steps.main.outputs.enabled }}

    steps:
      - id: main
        name: Set job var
        run: |
          if [[
            "${{ needs.public_py_image.outputs.image_exists_2019_2_7_17 }}" == "false" ||
            "${{ needs.public_py_image.outputs.image_exists_2019_3_7_5 }}" == "false"
          ]]; then
            if [[ "${{ needs.dockerhub_access.outputs.enabled }}" == "true" ]]; then
              echo "::set-output name=enabled::true"
            else
              echo "Docker image(s) need to be rebuilt, but you don't have dockerhub access." >&2
              echo "See comments in .github/workflows/windows.yaml for instructions." >&2
              exit 1
            fi
          fi

  base_image:
    name: Build base docker image if required
    runs-on: windows-${{ matrix.os-version }}
    needs:
      - image_tags
      - maybe_build

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'

    steps:
      - name: Set job vars
        id: vars
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          ${docker_image} = "${{ secrets.DOCKERHUB_NAMESPACE }}/rez-win-${{ matrix.os-version }}-base:${{ needs.image_tags.outputs.base }}"

          Write-Output "::set-output name=docker_image::${docker_image}"

      - name: Login to docker repository
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      - name: Inspect base image
        id: inspect
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          Write-Output "Inspecting image ${{ steps.vars.outputs.docker_image }}..."
          $ErrorActionPreference = "Continue"
          docker manifest inspect ${{ steps.vars.outputs.docker_image }} *>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            Write-Output "::set-output name=image_exists::false"
          }
          exit 0

      - name: Checkout
        if: steps.inspect.outputs.image_exists == 'false'
        uses: actions/checkout@v2

      - name: Build base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Building image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-base
          docker build --tag ${{ steps.vars.outputs.docker_image }} .

      - name: Push base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pushing image ${{ steps.vars.outputs.docker_image }}..."
          docker push ${{ steps.vars.outputs.docker_image }}

  py_image:
    name: Build py docker image if required
    runs-on: windows-${{ matrix.os-version }}
    needs:
      - image_tags
      - maybe_build
      - base_image

    strategy:
      fail-fast: false
      matrix:
        os-version:
          - '2019'
        py-version:
          - '2.7.17'
          - '3.7.5'

    steps:
      - name: Set job vars
        id: vars
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          ${base_docker_image} = "${{ secrets.DOCKERHUB_NAMESPACE }}/rez-win-${{ matrix.os-version }}-base:${{ needs.image_tags.outputs.base }}"
          ${docker_image} = "${{ secrets.DOCKERHUB_NAMESPACE }}/rez-win-${{ matrix.os-version }}-py-${{ matrix.py-version }}:${{ needs.image_tags.outputs.py }}"

          Write-Output "::set-output name=base_docker_image::${base_docker_image}"
          Write-Output "::set-output name=docker_image::${docker_image}"

      - name: Login to docker repository
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      - name: Inspect py image
        id: inspect
        if: needs.maybe_build.outputs.enabled == 'true'
        run: |
          Write-Output "Inspecting image ${{ steps.vars.outputs.docker_image }}..."
          $ErrorActionPreference = "Continue"
          docker manifest inspect ${{ steps.vars.outputs.docker_image }} *>$null || Write-Output "(no such image)"
          $ErrorActionPreference = "Stop"

          if ($LastExitCode -ne 0) {
            Write-Output "::set-output name=image_exists::false"
          }
          exit 0

      - name: Checkout
        if: steps.inspect.outputs.image_exists == 'false'
        uses: actions/checkout@v2

      - name: Pull base image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pulling base image ${{ steps.vars.outputs.base_docker_image }}..."
          docker pull ${{ steps.vars.outputs.base_docker_image }}

      - name: Build py image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Building image ${{ steps.vars.outputs.docker_image }}..."
          cd .github\docker\rez-win-py

          docker build `
            --tag ${{ steps.vars.outputs.docker_image }} `
            --build-arg BASE_IMAGE_NAME="${{ steps.vars.outputs.base_docker_image }}" `
            --build-arg IMAGE_NAME="${{ steps.vars.outputs.docker_image }}" `
            --build-arg PYTHON_VERSION="${{ matrix.py-version }}" `
            .

      - name: Push py image
        if: steps.inspect.outputs.image_exists == 'false'
        run: |
          Write-Output "Pushing image ${{ steps.vars.outputs.docker_image }}..."
          docker push ${{ steps.vars.outputs.docker_image }}

#  main:
#    name: Run rez tests
#    runs-on: windows-${{ matrix.os-version }}
#    needs:
#      - image_tags
#      - py_image
#
#    strategy:
#      fail-fast: false
#      matrix:
#        os-version:
#          - '2019'
#        py-version:
#          - '2.7.17'
#          - '3.7.5'
